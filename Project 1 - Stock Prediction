import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import math
import tensorflow as tf
from numpy import array
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout, TimeDistributed, RepeatVector
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
df = pd.read_csv('/content/contentdrive/MyDrive/BTC-USD.csv', index_col="Date", infer_datetime_format=True, parse_dates=True)
df.head(5)
df = df.drop(['Adj Close','Volume','Low','High','Close'], axis=1)
df.head()
dataset = df.values
dataset[:5]
plt.show()
scaler = MinMaxScaler(feature_range = (0,1))
print(dataset[:5],'\n')
print(dataset.shape)
# lookback -> timestep
def create_dataset(dataset, n_step_in, n_step_out):
    data_x, data_y = [],[] #data_x is data and data_y is label
    for i in range(len(dataset)-n_step_in-1): #we want if data be beyond len(sequendatasetce), the command will not continue
        data_x.append(dataset[i:(i+n_step_in)])
        data_y.append(dataset[i+n_step_in:i+n_step_in+n_step_out])
    return np.array(data_x) , np.array(data_y)
train_size = int(len(dataset) * 0.80)
train , test = dataset[0:train_size] , dataset[train_size:len(dataset)]
print(train.shape)
print(test.shape)
train[:8]
n_step_in , n_step_out = 4 , 2 #timestep or look_up

train_x , train_y = create_dataset(train, n_step_in, n_step_out)
test_x , test_y = create_dataset(test, n_step_in, n_step_out)
print(train_x.shape , train_y.shape)
print(test_x.shape , test_y.shape)
train_x[:3]
for i in range(len(train_x)):   
    print(train_x[i],train_y[i],'\n')

# print(train_x[:5],'\n')
# print(train_y[:5])
n_features = train_x.shape[2]
n_features
#stack lstm
model = Sequential()
model.add(LSTM(100,activation = 'relu',input_shape=(n_step_in,n_features)))   
model.add(RepeatVector(n_step_out))   
model.add(LSTM(50,activation = 'relu',return_sequences=True))   
model.add(TimeDistributed(Dense(1)))
model.compile(optimizer='adam',loss='mse')   
#verbose is the choice that how you want to see the output of your Nural Network while it's training. If you set verbose = 0, It will show nothing
print('real y(train):', train_y[:2])
print(train_y.shape)
print(test_y.shape)
train_y = train_y.reshape(-1,2)
test_y = test_y.reshape(-1,2)
print(train_y.shape)
print(test_y.shape)

Answer1 = pd.DataFrame() 
Answer1.head()
#train
Answer2 = pd.DataFrame() 
Answer2.head()
#test
test_x.shape , test_y.shape
test_ = array([[0.65318238, 0.60821794, 0.64699902, 0.65896666]])


print(test_.shape,'\n')
print(test_)
